gstaichi.lang.ast.ast_transformer_utils
=======================================

.. py:module:: gstaichi.lang.ast.ast_transformer_utils


Attributes
----------

.. autoapisummary::

   gstaichi.lang.ast.ast_transformer_utils.AutodiffMode


Classes
-------

.. autoapisummary::

   gstaichi.lang.ast.ast_transformer_utils.Builder
   gstaichi.lang.ast.ast_transformer_utils.VariableScopeGuard
   gstaichi.lang.ast.ast_transformer_utils.StaticScopeStatus
   gstaichi.lang.ast.ast_transformer_utils.StaticScopeGuard
   gstaichi.lang.ast.ast_transformer_utils.NonStaticControlFlowStatus
   gstaichi.lang.ast.ast_transformer_utils.NonStaticControlFlowGuard
   gstaichi.lang.ast.ast_transformer_utils.LoopStatus
   gstaichi.lang.ast.ast_transformer_utils.LoopScopeAttribute
   gstaichi.lang.ast.ast_transformer_utils.LoopScopeGuard
   gstaichi.lang.ast.ast_transformer_utils.NonStaticIfGuard
   gstaichi.lang.ast.ast_transformer_utils.ReturnStatus
   gstaichi.lang.ast.ast_transformer_utils.PureViolation
   gstaichi.lang.ast.ast_transformer_utils.ASTTransformerContext


Functions
---------

.. autoapisummary::

   gstaichi.lang.ast.ast_transformer_utils.get_decorator


Module Contents
---------------

.. py:data:: AutodiffMode

.. py:class:: Builder

.. py:class:: VariableScopeGuard(scopes: list[dict[str, Any]])

   .. py:attribute:: scopes


.. py:class:: StaticScopeStatus

   .. py:attribute:: is_in_static_scope
      :value: False



.. py:class:: StaticScopeGuard(status: StaticScopeStatus)

   .. py:attribute:: status


.. py:class:: NonStaticControlFlowStatus

   .. py:attribute:: is_in_non_static_control_flow
      :value: False



.. py:class:: NonStaticControlFlowGuard(status: NonStaticControlFlowStatus)

   .. py:attribute:: status


.. py:class:: LoopStatus

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: Normal
      :value: 0



   .. py:attribute:: Break
      :value: 1



   .. py:attribute:: Continue
      :value: 2



.. py:class:: LoopScopeAttribute(is_static: bool)

   .. py:attribute:: is_static


   .. py:attribute:: status
      :type:  LoopStatus


   .. py:attribute:: nearest_non_static_if
      :type:  ast.If | None
      :value: None



.. py:class:: LoopScopeGuard(scopes: list[dict[str, Any]], non_static_guard=None)

   .. py:attribute:: scopes


   .. py:attribute:: non_static_guard
      :value: None



.. py:class:: NonStaticIfGuard(if_node: ast.If, loop_attribute: LoopScopeAttribute, non_static_status: NonStaticControlFlowStatus)

   .. py:attribute:: loop_attribute


   .. py:attribute:: if_node


   .. py:attribute:: non_static_guard


.. py:class:: ReturnStatus

   Bases: :py:obj:`enum.Enum`


   Generic enumeration.

   Derive from this class to define new enumerations.


   .. py:attribute:: NoReturn
      :value: 0



   .. py:attribute:: ReturnedVoid
      :value: 1



   .. py:attribute:: ReturnedValue
      :value: 2



.. py:class:: PureViolation

   .. py:attribute:: var_name
      :type:  str


.. py:class:: ASTTransformerContext(excluded_parameters, end_lineno: int, is_kernel: bool, func: Func | Kernel, arg_features: list[tuple[Any, Ellipsis]] | None, global_vars: dict[str, Any], template_vars: dict[str, Any], is_pure: bool, argument_data, file: str, src: list[str], start_lineno: int, ast_builder: gstaichi._lib.core.gstaichi_python.ASTBuilder | None, is_real_function: bool, autodiff_mode: AutodiffMode)

   .. py:attribute:: func


   .. py:attribute:: local_scopes
      :type:  list[dict[str, Any]]
      :value: []



   .. py:attribute:: loop_scopes
      :type:  List[LoopScopeAttribute]
      :value: []



   .. py:attribute:: excluded_parameters


   .. py:attribute:: is_kernel


   .. py:attribute:: arg_features


   .. py:attribute:: returns
      :value: None



   .. py:attribute:: global_vars


   .. py:attribute:: template_vars


   .. py:attribute:: is_pure


   .. py:attribute:: argument_data


   .. py:attribute:: return_data
      :type:  tuple[Any, Ellipsis] | Any | None
      :value: None



   .. py:attribute:: file


   .. py:attribute:: src


   .. py:attribute:: indent
      :value: 0



   .. py:attribute:: lineno_offset


   .. py:attribute:: start_lineno


   .. py:attribute:: end_lineno


   .. py:attribute:: raised
      :value: False



   .. py:attribute:: non_static_control_flow_status


   .. py:attribute:: static_scope_status


   .. py:attribute:: returned


   .. py:attribute:: ast_builder


   .. py:attribute:: visited_funcdef
      :value: False



   .. py:attribute:: is_real_function


   .. py:attribute:: kernel_args
      :type:  list
      :value: []



   .. py:attribute:: only_parse_function_def
      :type:  bool
      :value: False



   .. py:attribute:: autodiff_mode


   .. py:attribute:: loop_depth
      :type:  int
      :value: 0



   .. py:attribute:: adstack_enabled
      :type:  bool


   .. py:method:: variable_scope_guard()


   .. py:method:: loop_scope_guard(is_static=False)


   .. py:method:: non_static_if_guard(if_node: ast.If)


   .. py:method:: non_static_control_flow_guard() -> NonStaticControlFlowGuard


   .. py:method:: static_scope_guard() -> StaticScopeGuard


   .. py:method:: current_scope() -> dict[str, Any]


   .. py:method:: current_loop_scope() -> dict[str, Any]


   .. py:method:: loop_status() -> LoopStatus


   .. py:method:: set_loop_status(status: LoopStatus) -> None


   .. py:method:: is_in_static_for() -> bool


   .. py:method:: is_in_non_static_control_flow() -> bool


   .. py:method:: is_in_static_scope() -> bool


   .. py:method:: is_var_declared(name: str) -> bool


   .. py:method:: create_variable(name: str, var: Any) -> None


   .. py:method:: check_loop_var(loop_var: str) -> None


   .. py:method:: get_var_by_name(name: str) -> tuple[bool, Any, str | None]


   .. py:method:: get_pos_info(node: ast.AST) -> str


.. py:function:: get_decorator(ctx: ASTTransformerContext, node) -> str

